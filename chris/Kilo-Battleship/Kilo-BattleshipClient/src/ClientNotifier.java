/*
  Runs on it's own thread on the client side and provides
  public, methods for the Client to set the
  currentShot generated by Client processes. Filters duplicate shots
  from client.

  SRP: Loop(Receive and send the current shot from the client to server)

  -Chris
*/

import java.io.ObjectOutputStream;
import java.util.HashSet;

public class ClientNotifier extends Notifier {

  // Current Shot. Updated constantly by containing Client
  private Shot currentShot = null; // Object that will be sent to ServerListener

  // Hash structure provides a caching mechanism to filter duplicate Shots from Server
  private HashSet<String> shotCache;

  /**
   * Constructor
   * @param _outputStream From containing Connection
   */
  ClientNotifier(ObjectOutputStream _outputStream) {
    super(_outputStream);
    this.shotCache = new HashSet<>();
  }

  /**
   * getShotKey()
   * Returns x, y integers from shot as a concatenated string for hashing
   * @return String
   */
  private String getShotKey() {
    return this.currentShot.getShotKey();
  }

  /**
   * isRepeatObject()
   * Override NotifierInterface interface
   * Returns if currentShot has already been taken
   * @return boolean
   */
  @Override
  public boolean isRepeatObject() {
    if (!this.shotCache.contains(this.getShotKey())) {
      this.shotCache.add(this.getShotKey());
      return false;
    }
    else {
      return true;
    }
  }

  /**
   * sendObject()
   * Override NotifierInterface interface
   * Sends currentShot to server
   */
  @Override
  public void sendObject() {
    try {
      this.outputStream.writeObject(this.currentShot);
      this.outputStream.flush();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * setObject()
   * Override NotifierInterface interface
   * Sets currentShot
   * @param _currentShot From containing Client
   */
  @Override
  public void setObject(Shot _currentShot) {
    this.currentShot = _currentShot;
  }

  /**
   * run()
   * Override Runnable interface
   * ClientNotifier thread
   */
  @Override
  public void run() {
    try {
      while(true) {
        if(currentShot != null) {
          if(!this.isRepeatObject()) {
            this.sendObject();
          }
          else {
            Thread.sleep(10);
          }
        } else {
          Thread.sleep(10);
        }
      }
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }
}
