/*
  Runs on it's own thread on the server side and provides
  public, synchronized methods for the ServerHandler to get
  the mutated currentBoard generated by the contained process.

  SRP: Constant(Mutate currentBoard according to currentShot)

  -Chris
*/

public class ShotProcess implements Runnable {
  private Shot currentShot;
  private Board currentBoard;
  private boolean isDead;

  /**
   * Constructor
   * @param _currentShot From ServerHandler
   * @param _currentBoard From ServerHandler
   */
  ShotProcess(Shot _currentShot, Board _currentBoard) {
    currentShot = _currentShot;
    currentBoard = _currentBoard;
    isDead = false;
  }

  /**
   * getCurrentBoard()
   * @return Board Returns currentBoard
   */
  public synchronized Board getCurrentBoard() {
    return currentBoard;
  }

  /**
   * setDead()
   * Signals that this runnable is dead
   */
  private synchronized void setDead() {
    isDead = true;
  }

  /**
   * isDead()
   * @return boolean Returns isDead
   */
  public synchronized boolean isDead() {
    return isDead;
  }

  @Override
  public void run() {
    /*
      Mutate the currentBoard object here according to the
      position of the currentShot. The Array[][] will need
      to be queried, the score updated, result messages, etc, etc.

      Synchronization is not an issue here, as this object will
      never be accessed while it's process is running.

      This thread will terminate, but this object will still
      remain in the processQueue where it can be handled by
      the ServerHandler. The board will be retrieved and set,
      then this object will get kicked out of queue.
    */



    // Flags that this process is done running.
    setDead();
  }
}
