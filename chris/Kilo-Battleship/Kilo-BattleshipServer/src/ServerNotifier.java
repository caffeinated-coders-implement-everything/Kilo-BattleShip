/*
  Runs on it's own thread on the server side and provides
  public, synchronized methods for the Connection to set
  currentBoard generated by ServerHandler. Filters Board
  objects that have already been sent.

  SRP: Loop(Receive and send the currentBoard from the server to client)

  -Chris
*/

import java.io.ObjectOutputStream;

public class ServerNotifier extends Notifier {

  // Current Board. Updated constantly from containing Connection
  private Board currentBoard = null;

  // Previous Board. Used to compare if currentBoard contains a fresh data set
  private Board prevBoard = null;

  /**
   * Constructor
   * @param _outputStream From containing Connection
   */
  ServerNotifier(ObjectOutputStream _outputStream) {
    super(_outputStream);
  }

  /**
   * isRepeatObject()
   * Override NotifierInterface interface
   * Returns if currentBoard has already been sent
   * @return boolean
   */
  @Override
  public synchronized boolean isRepeatObject() {
    if(currentBoard != prevBoard) {
      prevBoard = currentBoard;
      return false;
    }
    else {
      return true;
    }
  }

  /**
   * sendObject()
   * Override NotifierInterface interface
   * Sends currentBoard to client
   */
  @Override
  public synchronized void sendObject() {
    try {
      outputStream.writeObject(currentBoard);
      outputStream.flush();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * setObject()
   * Override NotifierInterface interface
   * Sets currentBoard
   * @param _currentBoard From containing Connection
   */
  @Override
  public synchronized void setObject(Board _currentBoard) {
    currentBoard = _currentBoard;
  }

  /**
   * run()
   * Override Runnable interface
   * ServerNotifier thread
   */
  @Override
  public void run() {
    while (true) {
      try {
        Thread.sleep(3);

        if (!isRepeatObject()) {
          sendObject();
        }
      }
      catch (Exception e) {
        e.printStackTrace();
      }
    }
  }
}
