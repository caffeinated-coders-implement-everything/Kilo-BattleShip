/*
  Runs on it's own thread on the server side and provides
  public, synchronized methods for the Connection to set
  newBoard generated by ServerHandler. Filters Board
  objects that have already been sent.

  SRP: Loop(Receive and send the newBoard from the server to client)

  -Chris
*/

import java.io.ObjectOutputStream;

public class ServerNotifier extends Notifier {

  // Current Board. Updated constantly from containing Connection
  private Board newBoard = null;
  private Board prevBoard = null;
  private boolean isGameOver = false;

  /**
   * Constructor
   * @param _outputStream From containing Connection
   */
  ServerNotifier(ObjectOutputStream _outputStream) {
    super(_outputStream);
  }

  private synchronized Board getNewBoard() {
    return newBoard;
  }

  private synchronized void setPrevBoard(Board _board) {
    prevBoard = _board;
  }

  private synchronized Board getPrevBoard() {
    return prevBoard;
  }

  synchronized void flagGameOver() {
    isGameOver = true;
  }

  private synchronized boolean isGameOver() {
    return  isGameOver;
  }

  /**
   * sendObject()
   * Override NotifierInterface interface
   * Sends newBoard to client
   */
  @Override
  public void sendObject() {
    try {
      outputStream.reset();
      outputStream.writeObject(getNewBoard());
      outputStream.flush();
    }
    catch(Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * setObject()
   * Override NotifierInterface interface
   * Sets newBoard
   * @param _newBoard From containing Connection
   */
  @Override
  public synchronized void setNewBoard(Board _newBoard) {
    newBoard = _newBoard;
  }

  /**
   * run()
   * Override Runnable interface
   * ClientNotifier thread
   */
  @Override
  public void run() {
    try {
      while (getNewBoard() == null) {
        Thread.sleep(50);
      }

      do {
          sendObject();
          Thread.sleep(100);
      } while (!isGameOver());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}
